name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            pkg-config \
            libclang-dev \
            libopencv-dev \
            libgtk-3-dev \
            libopenblas-dev \
            liblapack-dev

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set OpenCV environment variables
        run: |
          echo "OpenCV_DIR=/usr/lib/x86_64-linux-gnu/cmake/opencv4" >> $GITHUB_ENV

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Run Clippy
        run: |
          rustup component add clippy
          cargo clippy -- -D warnings

      - name: Check formatting
        run: |
          rustup component add rustfmt
          cargo fmt -- --check

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-20.04
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  release:
    needs: docker-build
    runs-on: ubuntu-20.04
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            pkg-config \
            libclang-dev \
            libopencv-dev \
            libgtk-3-dev \
            libopenblas-dev \
            liblapack-dev

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Set OpenCV environment variables
        run: |
          echo "OpenCV_DIR=/usr/lib/x86_64-linux-gnu/cmake/opencv4" >> $GITHUB_ENV

      - name: Build release binary
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Package binary
        run: |
          mkdir -p release
          cp target/x86_64-unknown-linux-gnu/release/facial_recognition_system release/
          cp target/x86_64-unknown-linux-gnu/release/facial-recognition-cli release/
          tar -czvf facial-recognition-system-${{ github.event.release.tag_name }}.tar.gz -C release .

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./facial-recognition-system-${{ github.event.release.tag_name }}.tar.gz
          asset_name: facial-recognition-system-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip
